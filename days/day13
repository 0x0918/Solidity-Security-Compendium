# Oracle Price Manipulation

Oracle price manipulation vulnerability occurs when a smart contract relies on an external data source (an oracle) to provide information, such as prices for tokens, and an attacker manipulates that data source to provide false information, leading to unintended consequences in the smart contract execution. Oracles are third-party services that provide external data to smart contracts since they cannot access off-chain information by themselves.

## Impact
An attacker who successfully manipulates an oracle's data can exploit the smart contract, leading to various undesirable outcomes, such as the theft of funds, incorrect token swaps, or unintended liquidations. Oracle price manipulation vulnerability can severely undermine the trust in a smart contract, as users cannot rely on the correctness of the information provided by the oracle.

## Example
Consider a simple smart contract that relies on an oracle for determining the exchange rate between two tokens:




In this example, the contract stores users' names and social security numbers in a private mapping. Despite the mapping being marked as private, this data can still be accessed by anyone who can interact with the contract's storage or analyze the blockchain.

Accessing private data on-chain is possible by interacting with the contract's storage. For example, using a tool like the Ethereum JSON-RPC API, one could read the storage slot containing the sensitive information.

### Demonstration
To read private storage variables using the Ethereum JSON-RPC API, you can use the `eth_getStorageAt` method. This method allows you to query the value of a storage slot in a specific contract. Keep in mind that although storage variables are marked private in the Solidity code, they are still accessible on the blockchain.

1. Identify the contract address: Find the address of the contract whose private storage variable you want to read (0x1230000000000000000000000000000000000000)

2. Determine the storage slot: Calculate the storage slot of the variable you want to access. The storage slot is determined by the position of the variable in the contract. For mappings, it's a little more complex; you can refer to the Solidity documentation for the exact formula.

3. Use `eth_getStorageAt` method: Make an API call using the `eth_getStorageAt` method with the contract address and storage slot as parameters.

Here's an example using the `UserInfo` contract from the example above:

![image](https://user-images.githubusercontent.com/35583758/226215558-c0059d8e-8a5d-455b-9e82-fc79c62e83f0.png)

This code snippet calculates the storage slot for the users mapping in the UserInfo contract and reads the data using the `eth_getStorageAt` method. The result will be the storage data for the specified user address.

Note that the result will be in a raw format (e.g., a hex-encoded string) and you may need to decode it based on the data type you're expecting. Also, remember that this method can only be used for simple storage variables and mappings. For more complex data structures, like nested mappings or structs, additional calculations may be required.

## Remediation
**Minimize on-chain data storage:** Avoid storing sensitive data on the blockchain, if possible. Instead, consider using off-chain storage solutions and store only the necessary data (e.g., hashes, pointers) on-chain.

**Encrypt sensitive data:** If storing sensitive data on-chain is unavoidable, consider encrypting the data before storing it in the contract.

**Use zero-knowledge proofs:** Implement privacy-enhancing technologies, such as zero-knowledge proofs, to allow users to prove properties about their data without revealing the data itself.

Applying the first remediation step, the `UserInfo` contract can be improved by storing only hashes of the sensitive information:

![image](https://user-images.githubusercontent.com/35583758/226215641-9e67265f-fdc1-4235-86ef-5a0cbd2b86d0.png)



